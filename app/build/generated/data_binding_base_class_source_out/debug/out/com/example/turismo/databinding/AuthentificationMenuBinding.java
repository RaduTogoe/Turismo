// Generated by view binder compiler. Do not edit!
package com.example.turismo.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Switch;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.turismo.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AuthentificationMenuBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final EditText emailField;

  @NonNull
  public final TextView forgotPassword;

  @NonNull
  public final Button loginButton;

  @NonNull
  public final TextView loginText;

  @NonNull
  public final ConstraintLayout main;

  @NonNull
  public final EditText passwordField;

  @NonNull
  public final TextView signup;

  @NonNull
  public final Switch switch1;

  private AuthentificationMenuBinding(@NonNull ConstraintLayout rootView,
      @NonNull EditText emailField, @NonNull TextView forgotPassword, @NonNull Button loginButton,
      @NonNull TextView loginText, @NonNull ConstraintLayout main, @NonNull EditText passwordField,
      @NonNull TextView signup, @NonNull Switch switch1) {
    this.rootView = rootView;
    this.emailField = emailField;
    this.forgotPassword = forgotPassword;
    this.loginButton = loginButton;
    this.loginText = loginText;
    this.main = main;
    this.passwordField = passwordField;
    this.signup = signup;
    this.switch1 = switch1;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AuthentificationMenuBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AuthentificationMenuBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.authentification_menu, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AuthentificationMenuBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.emailField;
      EditText emailField = ViewBindings.findChildViewById(rootView, id);
      if (emailField == null) {
        break missingId;
      }

      id = R.id.forgotPassword;
      TextView forgotPassword = ViewBindings.findChildViewById(rootView, id);
      if (forgotPassword == null) {
        break missingId;
      }

      id = R.id.loginButton;
      Button loginButton = ViewBindings.findChildViewById(rootView, id);
      if (loginButton == null) {
        break missingId;
      }

      id = R.id.loginText;
      TextView loginText = ViewBindings.findChildViewById(rootView, id);
      if (loginText == null) {
        break missingId;
      }

      ConstraintLayout main = (ConstraintLayout) rootView;

      id = R.id.passwordField;
      EditText passwordField = ViewBindings.findChildViewById(rootView, id);
      if (passwordField == null) {
        break missingId;
      }

      id = R.id.signup;
      TextView signup = ViewBindings.findChildViewById(rootView, id);
      if (signup == null) {
        break missingId;
      }

      id = R.id.switch1;
      Switch switch1 = ViewBindings.findChildViewById(rootView, id);
      if (switch1 == null) {
        break missingId;
      }

      return new AuthentificationMenuBinding((ConstraintLayout) rootView, emailField,
          forgotPassword, loginButton, loginText, main, passwordField, signup, switch1);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
